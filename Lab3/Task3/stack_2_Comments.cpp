#include <stdlib.h>
#include <iostream>


int* stackMemory1() //функция, возвращающая указатель на целочисленное значение 
{
    int a = 1; //Объявление и инициализация переменной а со значением 1 
    return &a; // возвращение указателя на переменную а 
}

int* stackMemory2() //функция, возвращающая указатель на целочисленное значение 

{
    int b = 2; //Объявление и инициализация переменной b со значением 2
    return &b; // возвращение указателя на переменную b
}

int main()
{
    int* b = stackMemory1(); //Вызов функции stackMemory1 и сохранение возвращенного указателя в b
    int a1 = *b; // 1, 

    /*В данной строке происходит разыменование указателя b, то есть получение значения, на которое указывает указатель b. 
    В данном случае, b содержит адрес переменной a, которая была объявлена внутри функции stackMemory1(). 
    После разыменования, значение, на которое указывает b, присваивается переменной a1, то есть 1*/

    int* c = stackMemory2(); //Вызов функции stackMemory2 и сохранение возвращенного указателя в c
    int a2 = *c; // 2, 

    /*В данной строке происходит разыменование указателя с, то есть получение значения, на которое указывает указатель с. 
    В данном случае, c содержит адрес переменной b, которая была объявлена внутри функции stackMemory1(). 
    После разыменования, значение, на которое указывает c, присваивается переменной a2, то есть 2*/

    int a3 = *b; // 2

    /*В данной строке снова происходит разыменование указателя b, то есть получение значения, на которое указывает указатель b. 
    Однако, сейчас b указывает на переменную b, объявленную в stackMemory2(), так как она была перезаписана в предыдущей строке. 
    Поэтому после разыменования a3 получает значение переменной b, которая была установлена равной 2 внутри функции stackMemory2(). 
    Таким образом, a3 содержит значение 2, а не 1, как a1*/

    std::cout << a1 << std::endl; //Выводим значение а1, то есть prints 1
    std::cout << a2 << std::endl; //Выводим значение а1, то есть prints 2
    std::cout << a3 << std::endl; //Выводим значение а1, то есть prints 2
    std::cout << ((std::byte*) b - (std::byte*) c) << std::endl; //Выводим разницы между указателями b и c в байтах (0, указатели равны)

    return 0;
}